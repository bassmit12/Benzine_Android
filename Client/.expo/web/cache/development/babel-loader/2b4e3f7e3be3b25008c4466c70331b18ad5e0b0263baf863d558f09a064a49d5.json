{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SettingsScreen = function SettingsScreen() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    connectionStatus = _useState2[0],\n    setConnectionStatus = _useState2[1];\n  var testConnection = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(\"https://measured-gentle-labrador.ngrok-free.app/test/connection\");\n        if (response.ok) {\n          setConnectionStatus(\"Connection successful!\");\n        } else {\n          setConnectionStatus(\"Connection failed.\");\n        }\n      } catch (error) {\n        console.error(\"Error testing connection:\", error);\n        setConnectionStatus(\"Connection error.\");\n      }\n    });\n    return function testConnection() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var clearTrips = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch(\"https://measured-gentle-labrador.ngrok-free.app/trip/deleteAll\", {\n          method: \"DELETE\"\n        });\n        if (response.ok) {\n          Alert.alert(\"Success\", \"Trips cleared successfully\");\n        } else {\n          Alert.alert(\"Error\", \"Failed to clear trips\");\n        }\n      } catch (error) {\n        console.error(\"Error clearing trips:\", error);\n        Alert.alert(\"Error\", \"Internal Server Error\");\n      }\n    });\n    return function clearTrips() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: \"white\"\n    },\n    children: [_jsx(Text, {\n      children: \"Settings\"\n    }), _jsx(TouchableOpacity, {\n      onPress: testConnection,\n      children: _jsx(View, {\n        style: {\n          backgroundColor: \"blue\",\n          padding: 16,\n          borderRadius: 8,\n          marginTop: 16\n        },\n        children: _jsx(Text, {\n          style: {\n            color: \"white\",\n            fontSize: 16\n          },\n          children: \"Test Connection\"\n        })\n      })\n    }), connectionStatus && _jsx(Text, {\n      style: {\n        marginTop: 16\n      },\n      children: connectionStatus\n    }), _jsx(TouchableOpacity, {\n      onPress: clearTrips,\n      children: _jsx(View, {\n        style: {\n          backgroundColor: \"red\",\n          padding: 16,\n          borderRadius: 8,\n          marginTop: 16\n        },\n        children: _jsx(Text, {\n          style: {\n            color: \"white\",\n            fontSize: 16\n          },\n          children: \"Clear Trips\"\n        })\n      })\n    })]\n  });\n};\nexport default SettingsScreen;","map":{"version":3,"names":["React","useState","Text","View","TouchableOpacity","Alert","jsx","_jsx","jsxs","_jsxs","SettingsScreen","_useState","_useState2","_slicedToArray","connectionStatus","setConnectionStatus","testConnection","_ref","_asyncToGenerator","response","fetch","ok","error","console","apply","arguments","clearTrips","_ref2","method","alert","style","flex","justifyContent","alignItems","backgroundColor","children","onPress","padding","borderRadius","marginTop","color","fontSize"],"sources":["C:/Visual Studio Code Projects/Benzine/Benzine_Android/Client/src/screens/SettingsScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Text, View, TouchableOpacity, Alert } from \"react-native\";\r\n\r\nconst SettingsScreen = () => {\r\n  const [connectionStatus, setConnectionStatus] = useState(null);\r\n\r\n  const testConnection = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://measured-gentle-labrador.ngrok-free.app/test/connection\"\r\n      );\r\n\r\n      if (response.ok) {\r\n        setConnectionStatus(\"Connection successful!\");\r\n      } else {\r\n        setConnectionStatus(\"Connection failed.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error testing connection:\", error);\r\n      setConnectionStatus(\"Connection error.\");\r\n    }\r\n  };\r\n\r\n  const clearTrips = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://measured-gentle-labrador.ngrok-free.app/trip/deleteAll\",\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        Alert.alert(\"Success\", \"Trips cleared successfully\");\r\n      } else {\r\n        Alert.alert(\"Error\", \"Failed to clear trips\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error clearing trips:\", error);\r\n      Alert.alert(\"Error\", \"Internal Server Error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: \"white\",\r\n      }}\r\n    >\r\n      <Text>Settings</Text>\r\n\r\n      <TouchableOpacity onPress={testConnection}>\r\n        <View\r\n          style={{\r\n            backgroundColor: \"blue\",\r\n            padding: 16,\r\n            borderRadius: 8,\r\n            marginTop: 16,\r\n          }}\r\n        >\r\n          <Text style={{ color: \"white\", fontSize: 16 }}>Test Connection</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n\r\n      {connectionStatus && (\r\n        <Text style={{ marginTop: 16 }}>{connectionStatus}</Text>\r\n      )}\r\n\r\n      <TouchableOpacity onPress={clearTrips}>\r\n        <View\r\n          style={{\r\n            backgroundColor: \"red\",\r\n            padding: 16,\r\n            borderRadius: 8,\r\n            marginTop: 16,\r\n          }}\r\n        >\r\n          <Text style={{ color: \"white\", fontSize: 16 }}>Clear Trips</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SettingsScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}